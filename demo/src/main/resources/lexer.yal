{
    // Estos imports son parte de la lógica de compilación
    // No deben quitarse para el buen funcionamiento
    import com.example.Modules.Analisis.Lex_Analisis;
    import com.example.models.AFD;
    import java.io.FileInputStream;
    import java.io.ObjectInputStream;
    import java.io.IOException;
}

let digit = ['0'-'9']
let number = digit+
let blanks = ' '|'\t'
let word = ['A'-'Z''a'-'z']+
let comment = (word|digit|' '|punct)+
let variable = (word'_'number)+
let punct = '?'|'!'|'.'
let singleString = '''comment'''
let doubleString = '"'comment'"'
let finalString = singleString|doubleString
let menor = '>'
let mayor = '<'
let igual = '='
let numeral = '#'
let menorigual = (menor)(igual)
let mayorigual = (mayor)(igual)
let multilineCommentStart = '/''*'(comment|blanks)+
let multilineCommentEnd = (comment|blanks)+'*''/'
let singlelineComment = (numeral)(comment)

rule gettoken =
blanks { return lexbuf }
| '\n' { return EOL }
| '+' { return PLUS }
| '-' { return MINUS }
| '*' { return TIMES }
| '/' { return DIV }
| '(' { return LPAREN }
| ')' { return RPAREN }
| '{' { return LHOOK }
| '}' { return RHOOK }
| '=' { return EQUALS }
| '&' { return APPERSAND }
| ';' { return EOF }
| word { return WORD }
| menor { return LESS }
| mayor { return MORE }
| menorigual { return LESSEQ }
| mayorigual { return MOREEQ }
| digit { return DIGIT }
| number { return NUMBER }
| variable { return VARIABLE }
| finalString  { return STRING }
| menorigual { return LESSIQUAL }
| multilineCommentStart { return MULTICOMMENTSTART }
| multilineCommentEnd { return MULTICOMMENTEND }
| singlelineComment { return SINGLECOMMENT }
